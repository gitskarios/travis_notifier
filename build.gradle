buildscript {
	ext {
		springBootVersion = '1.4.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

def versionMajor=getVersionMajor()
def versionMinor=getVersionMinor()
def versionPatch=getVersionPatch()

jar {
	baseName = 'travis'
	version = "$versionMajor.$versionMinor.$versionPatch"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')

	compile 'com.squareup.retrofit2:retrofit:2.1.0'
	compile 'com.squareup.retrofit2:converter-gson:2.1.0'
	compile 'com.squareup.okhttp3:okhttp:3.4.1'

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

def getVersionMajor() {
	def content = file('version.properties')

	Properties properties = new Properties()
	InputStream is = new ByteArrayInputStream(content.getBytes());
	properties.load(is)

	return properties['VERSION_MAJOR'].toInteger()
}

def getVersionMinor() {
	def content = file('version.properties')

	Properties properties = new Properties()
	InputStream is = new ByteArrayInputStream(content.getBytes());
	properties.load(is)

	return properties['VERSION_MINOR'].toInteger()
}

def getVersionPatch() {
	def content = file('version.properties')

	Properties properties = new Properties()
	InputStream is = new ByteArrayInputStream(content.getBytes());
	properties.load(is)

	return properties['VERSION_PATCH'].toInteger()
}